// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the output bits:
 * zr = (out == 0, 1, 0)
 * ng = (out < 0,  1, 0)
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not
CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // (out == 0, 1, 0)
        ng;      // (out < 0,  1, 0)

    PARTS:
    //// Replace this comment with your code.
    Mux16 (a=x, b=false, sel=zx, out=XMuxOut);
    Not16 (in=XMuxOut, out=NotX);
    Mux16 (a=XMuxOut, b=NotX, sel=nx, out=XOut);

    Mux16 (a=y, b=false, sel=zy, out=YMuxOut);
    Not16 (in=YMuxOut, out=NotY);
    Mux16 (a=YMuxOut, b=NotY, sel=ny, out=YOut);

    Add16 (a=XOut, b=YOut, out=XPlusY);
    And16 (a=XOut, b=YOut, out=XAndY);
    Mux16 (a=XAndY, b=XPlusY, sel=f, out=FMuxOut);

    Not16 (in=FMuxOut, out=NotF);
    // Most significant bit indicates whether number is negative
    // LSB = least significant byte
    // MSB = most significant byte
    Mux16 (a=FMuxOut, b=NotF, sel=no, out=out, out[15]=ng, out[0..7]=LSB, out[8..15]=MSB);

    Or8Way (in=LSB, out=OrLSB);
    Or8Way (in=MSB, out=OrMSB);
    // If LSB Or MSB = 1, then zr = 1
    Or (a=OrLSB, b=OrMSB, out=notzr);
    // If zr = 1, then out != 0, so zr = !zr
    // If zr = 0, then out = 0, so zr = !zr
    Not (in=notzr, out=zr);
}
